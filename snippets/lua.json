{
	// Place your snippets for lua here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Thred with while loop": {
		"prefix": "thread",
		"body": [
			"Citizen.CreateThread(function()",
			"\twhile ${true} do",
			"\t\tCitizen.Wait(${n})",
			"\t\t$0",
			"\tend",
			"end)"
		],
		"description": "Thread whith integrated while loop"
	},
	"Register net event": {
		"prefix": "netevent",
		"body": [
			"RegisterNetEvent('${1:eventName}')",
			"AddEventHandler('${1:eventName}', function(${2:...})",
			"\t$0",
			"end)"
		],
		"description": "Register net event and add an evcent handler"
	},
	"Register server event": {
		"prefix": "serverevent",
		"body": [
			"RegisterNetEvent('${1:eventName}')",
			"AddEventHandler('${1:eventName}', function(${2:...})",
			"\t$0",
			"end)"
		],
		"description": "Register server event and add an evcent handler"
	},
	"Client ESX initiation": {
		"prefix": "ESX",
		"body": [
			"ESX = nil",
			"Citizen.CreateThread(function()",
				"\twhile ESX == nil do",
					"\t\tTriggerEvent('esx:getSharedObject', function(obj) ESX = obj end)",
					"\t\tCitizen.Wait(0)",
				"\tend",
			"end)"
		],
		"description": "Client Initiation of ESX shared object"
	},
	"Server ESX initiation": {
		"prefix": "ESX",
		"body": [
			"ESX = nil",
			"TriggerEvent('esx:getSharedObject', function(obj) ESX = obj end)",
		],
		"description": "Server Initiation of ESX shared object"
	},
	"Fx Manifest": {
		"prefix": ["fx", "fx_manifest", "manifest"],
		"body": [
			"fx_version '${1:bodacious}'",
			"",
			"game 'gta5'",
			"$0"
		]
	},
	"Server Scripts": {
		"prefix": ["server_scripts", "srv"],
		"body": [
			"server_scripts {",
			"\t'${1:server}.lua',",
			"\t$0",
			"}",
		],
		"description": "Server Scripts array"
	},
	"Server Script": {
		"prefix": ["server_script", "srv"],
		"body": [
			"server_script '${1:server}.lua'",
			"$0"
		],
		"description": "Single Server Script"
	},
	"Client Scripts": {
		"prefix": ["client_scrips", "cln"],
		"body": [
			"client_scripts {",
			"\t'${1:client}.lua',",
			"\t$0",
			"}",
		],
		"description": "Client Scripts array"
	},
	"Client Script": {
		"prefix": ["client_script", "cln"],
		"body": [
			"client_script '${1:client}.lua'",
			"$0"
		],
		"description": "Single Client Script"
	},
	"Ped Coords": {
		"prefix": "ped",
		"body": [
			"local ped = GePlayerPed(-1)",
			"local pedCoords = GetEntityCoords(ped)",
			"$0"
		],
		"description": "Ped coordinates initiation"
	},
	"Trigger Server Event":{
		"prefix": "TriggerServerEvent",
		"body": [
			"TriggerServerEvent('${1:eventName}', ${2:...})",
		],
		"description": "Trigger Server event with arguments"
	},
	"Trigger Client Event":{
		"prefix": "TriggerClientEvent",
		"body": [
			"TriggerClientEvent('${1:eventName}', ${2:-1}, ${3:...})",
		],
		"description": "Trigger Client event with arguments"
	},
	"Trigger Event":{
		"prefix": "TriggerEvent",
		"body": [
			"TriggerEvent('${1:eventName}', ${2:...})",
		],
		"description": "Trigger an event with arguments"
	},

	// 
	//  ESX snippets
	// 
	"xPlayer initiation":{
		"prefix": "xPlayer",
		"body": "local xPlayer = ESX.GetPlayerFromId(${1:source})",
		"description": "Gets xPlayer object from player id"
	},
	"ESX.GetPlayerData":{
		"prefix": ["ESX.GetPlayerData", "GetPlayerData"],
		"body": "ESX.GetPlayerData()",
		"description": "Gets player data."
	},
	"ESX.IsPlayerLoaded":{
		"prefix": ["ESX.IsPlayerLoaded", "IsPlayerLoaded"],
		"body": "ESX.IsPlayerLoaded()",
		"description": "Checks if player is loaded"
	},
	"ESX.SetPlayerData":{
		"prefix": ["ESX.SetPlayerData", "SetPlayerData"],
		"body": "ESX.SetPlayerData(${1:key}, ${2:value})",
		"description": "Sets player data"
	},
	"ESX.ShowInventory":{
		"prefix": ["ESX.ShowInventory", "ShowInventory"],
		"body": "ESX.ShowInventory(${1:key}, ${2:value})",
		"description": "Shows inventory"
	},
	"ESX.ShowNotification":{
		"prefix": ["ESX.ShowNotification", "ShowNotification"],
		"body": "ESX.ShowNotification(${1:msg}, ${2:flash}, ${3:saveToBrief}, ${4:hudColorIndex})",
		"description": "Shows basic notification"
	},
	"ESX.ShowHelpNotification":{
		"prefix": ["ESX.ShowHelpNotification", "ShowHelpNotification"],
		"body": "ESX.ShowHelpNotification(${1:msg}, ${2:thisFrame}, ${3:bepp}, ${4:duration})",
		"description": "Shows help notification that supports displaying button inputs"
	},
	"ESX.ShowAdvancedNotification":{
		"prefix": ["ESX.ShowAdvancedNotification", "ShowAdvancedNotification"],
		"body": "ESX.ShowAdvancedNotification(${1:sender}, ${2:subject}, ${3:msg}, ${4:textureDict}, ${5:iconType}, ${6:flash}, ${7:saveToBrief}, ${8:hudColorIndex})",
		"description": "Shows advanced notification"
	},
	"ESX.TriggerServerCallback": {
		"prefix": ["ESX.TriggerServerCallback", "TriggerServerCallback"],
		"body": [
			"ESX.TriggerServerCallback('${1:callbackName}', function(${2:...})",
			"$0",
			"end, ${3:argument})"
		],
		"description": "Triggers server callback (ASync)"
	},
	"ESX.RegisterServerCallback": {
		"prefix": ["ESX.RegisterServerCallback", "RegisterServerCallback"],
		"body": [
			"ESX.RegisterServerCallback('${1:callbackName}', function(${2:argument}, cb)",
			"    cb(${...}})",
			"end)"
		],
		"description": "ESX.RegisterServerCallback"
	}

}